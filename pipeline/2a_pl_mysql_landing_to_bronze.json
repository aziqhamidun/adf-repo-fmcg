{
	"name": "2a_pl_mysql_landing_to_bronze",
	"properties": {
		"activities": [
			{
				"name": "bronze layer ingestion",
				"type": "DatabricksNotebook",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/databricks_notebooks/mysql_bronze_ingestion",
					"baseParameters": {
						"LoadID": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"bronze_schema": {
							"value": "@pipeline().parameters.metadata_values.bronze_schema",
							"type": "Expression"
						},
						"bronze_table": {
							"value": "@pipeline().parameters.metadata_values.bronze_tbl",
							"type": "Expression"
						},
						"env": {
							"value": "@pipeline().globalParameters.env",
							"type": "Expression"
						},
						"source_file_name": {
							"value": "@pipeline().parameters.metadata_values.source_file_or_table_name",
							"type": "Expression"
						},
						"storage_account_name": {
							"value": "@pipeline().parameters.metadata_values.storage_account",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_adb_compute",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "compare records count",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "bronze layer ingestion",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(activity('bronze layer ingestion').output.runOutput[0], activity('bronze layer ingestion').output.runOutput[1])",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "records mismatch log",
							"type": "DatabricksNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/databricks_notebooks/log_record_tbl_insert",
								"baseParameters": {
									"env": {
										"value": "@pipeline().globalParameters.env",
										"type": "Expression"
									},
									"pipeLineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"logMessage": {
										"value": "@concat('Records mismatch between source file ',pipeline().parameters.metadata_values.source_file_or_table_name, ' records and ingested records in bronze layer table ',pipeline().parameters.metadata_values.bronze_tbl)",
										"type": "Expression"
									},
									"status": {
										"value": "success",
										"type": "Expression"
									},
									"triggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"loadId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"logTimeStamp": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'Asia/Kuala_Lumpur'),'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_adb_compute",
								"type": "LinkedServiceReference"
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "bronze layer ingestion success log",
							"type": "DatabricksNotebook",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"notebookPath": "/databricks_notebooks/log_record_tbl_insert",
								"baseParameters": {
									"env": {
										"value": "@pipeline().globalParameters.env",
										"type": "Expression"
									},
									"pipeLineName": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"logMessage": {
										"value": "@concat('Inserted ',activity('bronze layer ingestion').output.runOutput[1], ' records in bronze layer table ',pipeline().parameters.metadata_values.bronze_tbl)",
										"type": "Expression"
									},
									"status": {
										"value": "success",
										"type": "Expression"
									},
									"triggerType": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"loadId": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"logTimeStamp": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'Asia/Kuala_Lumpur'),'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_adb_compute",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "bronze layer ingestion failure log",
				"type": "DatabricksNotebook",
				"dependsOn": [
					{
						"activity": "bronze layer ingestion",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/databricks_notebooks/log_record_tbl_insert",
					"baseParameters": {
						"env": {
							"value": "@pipeline().globalParameters.env",
							"type": "Expression"
						},
						"pipeLineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"logMessage": {
							"value": "@concat('Failed to ingest source file ',pipeline().parameters.metadata_values.source_file_or_table_name, ' to bronze layer table ', pipeline().parameters.metadata_values.bronze_tbl)",
							"type": "Expression"
						},
						"status": {
							"value": "@concat('Error: ', activity('bronze layer ingestion').Error.message)",
							"type": "Expression"
						},
						"triggerType": {
							"value": "@pipeline().TriggerType",
							"type": "Expression"
						},
						"loadId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"logTimeStamp": {
							"value": "@formatDateTime(convertFromUtc(utcNow(), 'Asia/Kuala_Lumpur'),'yyyy-MM-dd HH:mm:ss')",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_adb_compute",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "pipeline_inprogress_email",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "bronze layer ingestion",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "POST",
					"url": {
						"value": "@pipeline().parameters.metadata_values.logic_app_url",
						"type": "Expression"
					},
					"body": {
						"value": "{\n    \"to\":\"@{pipeline().parameters.metadata_values.email_id}\",\n    \"subject\":\" @{concat('[',pipeline().globalParameters.env,'] ',pipeline().Pipeline,' : [bronze layer ingestion failed]')}\",\n    \"email_body\":\"\n   \n    <!DOCTYPE html>\n<html>\n<body>\n    Dear All,<br/>\\n\n\n    Please find below the status for @{pipeline()?.TriggeredByPipelineName}:<br/>\n    \n    <table>\n        <tr>\n            <th style='text-align: left;'>Parameters</th>\n            <th style='text-align: left;'>Value</th>\n        </tr>\n        <tr>\n            <td>JobID</td>\n            <td>@{pipeline().parameters.metadata_values.job_id}</td>\n        </tr>\n        <tr>\n            <td>Status</td>\n            <td><span style='color:Red';>Failed</span></td>\n        </tr>\n        <tr>\n            <td>Scheduled</td>\n            <td>@{pipeline().TriggerType}</td>\n        </tr>\n        <tr>\n            <td>LoadID</td>\n            <td>@{pipeline()?.TriggeredByPipelineRunId}</td>\n        </tr>\n        <tr>\n            <td>JobStart</td>\n            <td>@{pipeline().parameters.pipeline_start_time}</td>\n        </tr>\n    </table><br/>    \n    <p>Aziq Hamidun</p>\n</body>\n</html>\n    \"\n}",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"metadata_values": {
				"type": "object"
			},
			"pipeline_start_time": {
				"type": "string"
			}
		},
		"annotations": []
	}
}